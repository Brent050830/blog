[{"content":" 📒听课笔记\n💡课件\n","date":"2025-03-02T23:48:41+08:00","image":"https://t.alcy.cc/ycy?random=2236acc5","permalink":"https://Brent050830.site/p/%E8%AE%BE%E8%AE%A1%E7%B4%A2%E5%BC%95/","title":"设计索引"},{"content":" 📒听课笔记\n💡课件\n","date":"2025-03-02T23:47:50+08:00","image":"https://t.alcy.cc/ycy?random=96451a3d","permalink":"https://Brent050830.site/p/%E5%B7%A5%E7%83%AD%E7%B4%A2%E5%BC%95/","title":"工热索引"},{"content":"","date":"2025-03-02T18:34:37+08:00","image":"https://t.alcy.cc/ycy?random=03294c06","permalink":"https://Brent050830.site/p/%E8%AF%BE%E4%BB%B6/","title":"课件"},{"content":"","date":"2025-03-01T18:51:10+08:00","image":"https://t.alcy.cc/ycy?random=1f56051a","permalink":"https://Brent050830.site/p/%E5%B7%A5%E7%A8%8B%E6%B5%81%E4%BD%93%E5%8A%9B%E5%AD%A6/","title":"工程流体力学"},{"content":"绪论 基本概念 构件：\n杆件： 横截面：等截面和变截面 轴线：直杆和曲杆 板壳 块体 变形：弹性变形，塑性变形\n内力：\n失效：失去原有设计所规定的功能\n杆件与力：\n拉压杆，拉压力\n转轴，扭转\n柱子，两端受压\n梁，弯曲\n性质 材料力学研究三个主要的性质\n强度：抵抗破坏\n刚度：抵抗变形\n稳定性：保持原有平衡状态的能力\n基本假设 定义：由固体构成，外力作用下将发生变形，称为变形固体\n基本假设：\n连续性假设：变形前后无空隙 均匀性假设：任何部分力学性能相同 各向同性假设：物体沿着不同方向力学性能相同 构体变形微小 外力 作用方式 体积力 表面力：分布力和集中力 时间 静载荷 动载荷：交变和冲击 从而产生，静强度，动强度和疲劳强度的概念 内力 内力和内力矩 内力：轴力和剪力\n力矩：扭矩和弯矩\n求内力 截面法，截取代平\n内力集度（应力） 内力集度——应力：正应力，切（剪）应力\n正应力：垂直截面，$\\sigma =\\lim_{\\bigtriangleup A \\to 0} \\frac{dF_A}{dA} $\n切（剪）应力：$\\sigma =\\lim_{\\bigtriangleup A \\to 0} \\frac{dF_S}{dA} $\n变形 线变形：长度变化 角变形：线段的夹角变化 应变：度量构件一点处的变形程度\n$$ \\epsilon _{\\Delta x}=\\lim_{\\Delta x \\to 0} \\frac{\\Delta s}{\\Delta x} $$ 切应变（角应变）：对应的是切应力\nM点在xy平面内的切应变 $\\gamma =\\alpha +\\beta $ 变形的基本形式 拉伸与压缩：受力（正应力） 弯曲：受到弯矩 扭转：受扭矩：作用线垂直于轴线。 剪切：受到大小相等，方向相反，靠的很近的力 轴向 轴向拉伸与压缩 轴力：截面上的内力，与杆件的轴线重合\n拉为正，压为负 画图时，正值在上方，负值在下方 横截面上的内力与应力 假设：轴向拉伸后仍为平面 纵向纤维，伸长量相等 受力相等 各点应力相等 $$ \\sigma=\\frac{F_N}{A} $$ 其中的$F_N=F$为拉、压力\n改公式假设横截面上的每一点的正应力相等，但是，当以集中力的方式作用时，正应力分布不均匀\n所以引入圣维南定理：在距离外力区域较远的区域，集中力造成的影响可以忽略（离外力一个宽度的距离）\n","date":"2025-02-17T10:18:46+08:00","image":"https://t.alcy.cc/ycy","permalink":"https://Brent050830.site/p/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/","title":"材料力学"},{"content":"hugo 下载git、hugo，进行环境配置，在hugo中下载stack主题，部署到github上，之后进行自动部署\ncloudflare 在腾讯云购买域名，将服务器地址修改为cloudflare后在github修改域名，进行加速\n相关的网址 hugo\nstack\nstack中文网址\nb站up主个人网页\n","date":"2025-02-11T19:23:30+08:00","permalink":"https://Brent050830.site/p/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"个人博客搭建"},{"content":"基本公式写法 行内式与独立式 $$x-y=1$$上下标 $$ x^2=y_1=x^{x_1+y}\\\\ x^2+y_1=2 $$括号 $$ f(x,y)=x^2+y_2,x \\epsilon[1,10],y \\epsilon\\{1,2,3\\} $$ 对大括号进行转义 $$ \\left.(\\sqrt {1 \\over 2}\\right)\\\\ $$ $$ \\{ \\}\\\\ \\lbrace $$ 省略号 分数 $$ \\frac{1-x}{y+1} $$$$ x\\over{x+1} $$开方 $$ \\sqrt[3]{9} $$向量 $$ \\vec a\\\\ \\vec {ab} $$极限 $$ \\lim_{n\\rightarrow+\\infty}\\frac{1}{n} $$求导 $$ y\\prime=nx^{n-1} $$方程组 $$ y:\\begin{cases} x+y=1\\\\ x-y=0\\\\ x^{y+1}=1 \\end{cases} $$矩阵 $$ A= \\left[\\begin{matrix} 1\u00262\u00263\\\\ 4\u00265\u00266\\\\ 7\u00268\u00269\\\\ \\end{matrix}\\right] $$对数 $$ \\log\\\\ \\lg\\\\ \\ln $$数学符号 $$ \\not=\\\\ \\approx\\\\ \\leq\\\\ \\geq\\\\ \\times\\\\ \\cdot\\\\ \\pm\\\\ \\div\\\\ \\infty\\\\ \\sum\\\\ \\prod\\\\ \\coprod\\\\ \\uparrow\\\\ \\downarrow\\\\ \\leftarrow\\\\ \\rightarrow\\\\ \\overline{a+b+c}\\\\ $$定积分 $$ \\int\\\\ \\iint\\\\ \\iiint\\\\ \\oint\\\\ $$三角函数 $$ \\bot\\\\ \\angle\\\\ 30^\\circ\\\\ \\sin\\\\ \\cos\\\\ \\tan\\\\ \\cot\\\\ \\sec\\\\ \\csc $$集合 $$ \\emptyset\\\\ \\in\\\\ \\notin\\\\ \\supset\\\\ \\supseteq\\\\ \\bigcap\\\\ \\bigcup\\\\ \\bigvee\\\\ \\bigwedge\\\\ $$希腊字母 $$ \\alpha\\\\ \\beta\\\\ \\gamma\\\\ \\pi\\\\ $$ No. Lowercase Uppercase English IPA $1$ $\\alpha$ $A$ $alpha$ /\u0026lsquo;ælfə/ $2$ $\\beta$ $B$ $beta$ /\u0026lsquo;bi:tə/or/\u0026lsquo;beɪtə/ $3$ $\\gamma$ $\\Gamma$ $gamma$ /\u0026lsquo;gæmə/ $4$ $\\delta$ $\\Delta$ $delta$ /\u0026lsquo;deltə/ $5$ $\\epsilon$ $E$ $epsilon$ /\u0026rsquo;epsɪlɒn/ $6$ $\\zeta$ $Z$ $zeta$ /\u0026lsquo;zi:tə/ $7$ $\\eta$ $H$ $eta$ /\u0026lsquo;i:tə/ $8$ $\\theta$ $\\Theta$ $theta$ /\u0026lsquo;θi:tə/ $9$ $\\iota$ $I$ $iota$ /aɪ\u0026rsquo;əʊtə/ $10$ $\\kappa$ $K$ $kappa$ /\u0026lsquo;kæpə/ $11$ $\\lambda$ $\\lambda$ $lambda$ /\u0026rsquo;læmdə/ $12$ $\\mu$ $M$ $mu$ /mju:/ $13$ $\\nu$ $N$ $nu$ /nju:/ $14$ $\\xi$ $\\Xi$ $xi$ /ksi/or/\u0026lsquo;zaɪ/or/\u0026lsquo;ksaɪ/ $15$ $\\omicron$ $O$ $omicron$ /əu\u0026rsquo;maikrən/or/\u0026lsquo;ɑmɪ,krɑn/ $16$ $\\pi$ $\\Pi$ $pi$ /paɪ/ $17$ $\\rho$ $P$ $rho$ /rəʊ/ $18$ $\\sigma$ $\\Sigma$ $sigma$ /\u0026lsquo;sɪɡmə/ $19$ $\\tau$ $T$ $tau$ /tɔ:/or/taʊ/ $20$ $\\upsilon$ $\\Upsilon$ $upsilon$ /\u0026lsquo;ipsilon/or/\u0026lsquo;ʌpsilɒn/ $21$ $\\phi$ $\\Phi$ $phi$ /faɪ/ $22$ $\\chi$ $X$ $chi$ /kaɪ/ $23$ $\\psi$ $\\Psi$ $psi$ /psaɪ/ $24$ $\\omega$ $\\Omega$ $omega$ /\u0026lsquo;əʊmɪɡə/or/oʊ\u0026rsquo;meɡə/ 使用katex KATEX\n随机 随机过程的基本概念 分为三大类 随机过程——参数集和状态空间是连续的（每时每刻的温度变化） 随机序列——离散的 链——既不是随机过程，也不是随机序列（马尔科夫链） 状态空间：温度取值 参数集：时间\n随机过程的分布函数 ①一维分布函数 $F(t,x)=P \\lbrace X(t)\u0026lt;x\\rbrace$ ②二维分布函数 $F(s,t;x,y)=P \\lbrace X(s)\u0026lt;x,X(t)\u0026lt;y\\rbrace $ 随机过程的数字特征 ①均值函数 $$m(t)=E(X(t))$$ ②方差函数 $D(t)=E(X^2(t))-m^2(t)=C(t,t)$ ③协方差函数 $C(s,t)=E(X(s)X(t))-m(s)m(t)$ ④相关函数 $R(s,t)=E(X(s)X(t))$ ⑤互协方差函数 $C_{XY}(s,t)=R_{XY}(s,t)-E(X(s))E(Y(Y(t)))$ ⑥互相关函数 $R_{XY}(s,t)=E(X(s)Y(t))$ 随机过程的数字特征都与数学期望有关\n-互协方差函数、与两个分布有关\n题型一：随机过程的数字特征 $①X(t)=α\\cos(\\beta t+\\theta),\\theta在[0,2\\pi]上均匀分布，求X(t)的均值函数，方差，相关、协方差$\n解：\n$$ E(X(t))=\\int^{+\\infty}_{-\\infty}X(t)f(\\theta)d\\theta=\\int^{2\\pi}_0\\alpha\\cos(\\beta+\\theta)\\frac{1}{2\\pi}d\\theta=0\\\\ 期望是对随机变量求的\\\\ R(s,t)=E(X(s)X(t))=\\int^{+\\infty}_{-\\infty}X(t)X(s)f(\\theta)d\\theta \\\\ =\\frac{\\alpha^2}{2}\\cos\\beta(t-s)\\\\ 使用积化和差公式\\\\ C(s,t)=E(X(s)X(t))-m(s)m(t)=R(s,t)\\\\ D(t)=C(t,t)=\\frac{\\alpha^2}{2} $$$$ ②设随机过程的X(t)=Vt，其中V是(0.1)上均匀分布的随机变量，求过程X(t)的均值和自相关函数\\\\ 解：\\\\ V的概率密度函数为\\\\ f(v)= \\begin{cases} 1,v\\epsilon(0,1) \\\\ 0,其他 \\end{cases}\\\\ E(X(t))=\\int^{+\\infty}_{-\\infty}x(t)f(v)dv=\\int^1_0vtdt=\\frac{t}{2}\\\\ R_x(t_1,t_2)=E(X(t_1)Y(t_2))=E(Vt_1Vt_2)=\\int_0^1v^2t_1t_2dv=\\frac{t_1t_2}{3}\\\\ $$我们 ","date":"2025-02-08T18:07:37+08:00","image":"https://pic1.imgdb.cn/item/67a798d5d0e0a243d4fd27cd.webp","permalink":"https://Brent050830.site/p/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E5%85%AC%E5%BC%8F/","title":"数学物理公式"},{"content":"使用pycharm Python有6种数据类型\n整数\n浮点数\n字符串\n字符串需要用\u0026quot;\u0026ldquo;包围起来\n基本内容 字面量 1 2 3 666 13.14 \u0026#34;我是\u0026#34; 1 2 3 4 # 进行输出字面量（**print**） print(666) print(13.14) print(\u0026#34;黑马程序员\u0026#34;) 注释 1 2 3 4 5 6 7 8 9 10 11 12 13 # 以#作为开头，以一个空格隔开（单行注释） \u0026#34;\u0026#34;\u0026#34; 多行注释的使用 可以换行 \u0026#34;\u0026#34;\u0026#34; 666# 一个整数字面量 13.14# 浮点数字面量 print(666) print(13.14) print(\u0026#34;黑马程序员\u0026#34;)# 输出字符串字面量 \u0026#34;\u0026#34;\u0026#34; 多行注释可以用来 \u0026#34;\u0026#34;\u0026#34; ctrl+/ 快速注释 tab ,shift+tab 实现缩进与退4格\n变量 记录数据用的（储存） 变量名称=变量值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 money=49 print(\u0026#34;钱包还有:\u0026#34;,money)# print可以输出多个数据，使用，隔开即可 50-10 50/2 50*2 money=money-10# 通过变量减 print(\u0026#34;钱包还有:\u0026#34;,money) print(\u0026#34;钱包还有:\u0026#34;, money,\u0026#34;元，因为买了10元的冰淇淋\u0026#34;) \u0026#39;\u0026#39;\u0026#39; 为什么使用变量，为了重复使用它 \u0026#39;\u0026#39;\u0026#39; print(\u0026#34;现在是下午1点，钱包剩余：\u0026#34;,money) print(\u0026#34;现在是下午2点，钱包剩余：\u0026#34;,money) print(\u0026#34;现在是下午3点，钱包剩余：\u0026#34;,money) print(\u0026#34;现在是下午4点，钱包剩余：\u0026#34;,money) # 变量的值可以改变！！！ # print输出多份内容：print(1,2,3,4) 作业\n1 2 3 4 print(\u0026#34;当前钱包余额：\u0026#34;,50,\u0026#34;元\u0026#34;) print(\u0026#34;花费：\u0026#34;,10,\u0026#34;元\u0026#34;) print(\u0026#34;花费：\u0026#34;,10,\u0026#34;元\u0026#34;) print(\u0026#34;最终钱包剩余：\u0026#34;,35,\u0026#34;元\u0026#34;) 数据类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026#34;\u0026#34;\u0026#34; 数据是有类型的 可以使用type函数进行 使用变量储存type返回值 \u0026#34;\u0026#34;\u0026#34; print(type(\u0026#34;我们\u0026#34;)) print(type(666)) print(type(11.233)) a=type(\u0026#34;wm\u0026#34;) b=type(444) print(a) # 上述查看了字面量的类型 # 还可以看看吧变量中储存数据的类型 name=\u0026#34;ssss\u0026#34; name_type=type(name) print(name_type) # 以上三种方式！！！ # type是查看输出的类型（数据的类型） # 而非变量的类型，而是变量存储的数据的类型。 类型 描述 说明 string 字符串 int 整形 float 浮点数 在python中，变量所存储的类型是无需声明的 变量在python中是没有类型的\ntype有返回值（目前的第一个有返回值的）\n数据类型转换 为什么转换？\ninput默认是字符串 三种： int float str 三者是有返回值的\n1 2 3 4 5 6 7 8 9 10 11 12 13 a=str(11) b=int(11.11) c=float(\u0026#34;12\u0026#34;) d=int(float(\u0026#34;12.92\u0026#34;))# \u0026#34;12.92\u0026#34;不能直接变成int? print(a,type(a)) print(b,type(b)) print(c,type(c)) print(d,type(d)) \u0026#34;\u0026#34;\u0026#34; 任意数字都可以转字符串 但是字符串转数字必须所有内容都是数字 浮点数转换为整数丢失小数部分！！！ \u0026#34;\u0026#34;\u0026#34; 标识符 标识符和变量的关系 标识符包括变量、类、方法。\n三个规则\n内容限定 1. 英文 2. 中文(不推荐使用) 3. 数字(不能用在开头) 4. 下划线_ 大小写敏感 1. a!=A 不可使用关键字 1. 不需要背 2. 大小写敏感也适用于关键字 1 2 3 4 5 6 7 8 # 1_name=\u0026#34;ss\u0026#34; # 错误的 #name_!=\u0026#34;ss\u0026#34; a=\u0026#34;333\u0026#34; A=666 print(a,A) # 使用关键字是错误的！！！ # class=1(×) Class=1# (√) 规范\n明了 简短 下划线命名法 英文字母小写或驼峰命名法 运算符 算术运算符 使用 1 2 3 4 5 6 7 8 print(\u0026#34;1+1=\u0026#34;,1+1) print(\u0026#34;1-1=\u0026#34;,1-1) print(\u0026#34;1*1=\u0026#34;,1*1) print(\u0026#34;1/1=\u0026#34;,1/1) # /的返回值为浮点数类型？ print(\u0026#34;11//2=\u0026#34;,11//2) print(\u0026#34;11%2=\u0026#34;,11%2) print(\u0026#34;2**2=\u0026#34;,2**2) 赋值运算符 1 2 3 4 5 6 num=1 num+=1 # num=num+1 print(num) num-=1 print(num) 字符串拓展 字符串的定义 单引号定义 双引号 三引号\u0026rdquo;\u0026ldquo;\u0026ldquo;ssss\u0026rdquo;\u0026rdquo;\u0026quot;(用变量接受为字符串，反之为注释) ==最常用为双引号== 字符串包括\u0026rsquo; \u0026ldquo;\n单引号定义 双引号定义 转义字符 1 2 3 name1=\u0026#39;\u0026#34;我是\u0026#34;\u0026#39;# \u0026#34;我是\u0026#34; name2=\u0026#34;\u0026#39;我是\u0026#39;\u0026#34;# \u0026#39;我是\u0026#39; name3=\u0026#34;\\\u0026#34;我是\\\u0026#34;\u0026#34;# \u0026#34;我是\u0026#34; 字符串的拼接 +号\n字面量与变量拼接\n1 2 3 4 5 6 print(\u0026#34;我是\u0026#34;+\u0026#34;cb\u0026#34;) print(\u0026#34;woshi\u0026#34;,\u0026#34;cb\u0026#34;)# 逗号分割中间会有空格 age=19 print(\u0026#34;wojinnian\u0026#34;+str(age)+\u0026#34;suile\u0026#34;) # 实现类型转换的拼接 # 因为只能实现字符串的拼接 字符串的格式化 变量太多事，拼接太麻烦了 无法与其他类型拼接 占位的方式 与c语言类似的地方 %s相当于+str()的形式 %用来占位 s声明类型\n1 2 3 4 5 m=\u0026#34;我叫\u0026#34; n=\u0026#34;%scb\u0026#34;%m age=19 b=\u0026#34;%s,年龄是%s\u0026#34;%(n,age)# 多变量占位 c=\u0026#34;%s,年龄是%d\u0026#34;%(n,age) %s 字符串 %d 整数 %f 浮点数 这里的sdf实际上实现了类型转换 必须符合之前的要求\n格式化的精度控制 m.n来控制 m为宽度，n为小数精度 %7.2f %5d 小数部分和小数点也会计入宽度 小数部分四舍五入 m比本身宽度小时，不生效\n1 2 3 4 5 num=11.1234567 print(\u0026#34;精度控制%7.2f\u0026#34;%num) print(\u0026#34;精度控制%7.6f\u0026#34;%num)# 可见是优先看小数位数 print(\u0026#34;精度控制%7.4f\u0026#34;%num) print(\u0026#34;精度控制%3f\u0026#34;%num)# 不生效 快速格式化的方式 f\u0026rdquo;{}\u0026quot; 不限数据类型，不做精度控制，原样输出\n1 2 3 4 name=\u0026#34;cb\u0026#34; age=19 year=2005 print(f\u0026#34;我的名字是{name}，年龄是{age}，出生于{year}\u0026#34;) f\u0026quot;{变量}{变量}\u0026ldquo;的方式 ==适合对精度没有要求==\n表达式的格式化 表达式：一条有明确执行结果的代码语句\n1+1、5*2 变量的定义 1 2 3 4 print(\u0026#34;1*1=%d\u0026#34;%(1*1)) print(f\u0026#34;1*2的结果是{1*2}\u0026#34;) print(\u0026#34;字符串的类型名字是%s\u0026#34;%type(\u0026#34;字符串\u0026#34;)) # 相当于得有返回值 小作业： 1 2 3 4 5 6 7 name=\u0026#34;博客\u0026#34; price=19.99 code=\u0026#34;003032\u0026#34;# 需要使用字符串定义！！！ factor=1.2 day=7 print(f\u0026#34;公司：{name}，股票代码{code}，当前股价{19.99}\u0026#34;) print(\u0026#34;每日增长系数:%.1f，经过%d天的增长，股价达到了%.2f\u0026#34;%(factor,day,price*factor**day))# 可以直接表达式计算诶 数据输入 input语句\n终于开始输入了 获取键盘的输入\nprint——输出 inpuu——输入 1 2 3 4 5 6 7 8 9 print(\u0026#34;请告诉我你是谁\u0026#34;) name=input() print(\u0026#34;你是%s\u0026#34;%name) name=input(\u0026#34;请告诉我你是谁\u0026#34;)# input中的内容相当于print print(\u0026#34;你是%s\u0026#34;%name) # input输入的数据类型是字符串类型！！！ # 都当做字符串看待（无论输入什么） # 需要数据类型转换 小作业 1 print(f\u0026#34;你好：{input(\u0026#34;名称\u0026#34;)}，您是尊贵的：{input(\u0026#34;类型\u0026#34;)}用户，欢迎您的光临\u0026#34;) 语句学习 布尔类型和比较运算符 布尔类型 表示真假 比较运算\n布尔类型 是否 是一种数字类型 Ture(真) 1 False(假) 0 赋值 比较运算\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 result=10\u0026gt;5 re=\u0026#34;ad\u0026#34;==\u0026#34;ac\u0026#34; bool_1=True bool_2=False print(f\u0026#34;bool_1的变量内容是：{bool_1},类型是{type(bool_1)}\u0026#34;) # 可以直接赋值 # ==，！=，\u0026gt;,\u0026lt;,\u0026gt;=,\u0026lt;= bool_1=True bool_2=False print(f\u0026#34;bool_1的变量内容是：{bool_1},类型是{type(bool_1)}\u0026#34;) num1=10 num2=10 print(f\u0026#34;num1==num2的结果是{num1==num2}\u0026#34;) nm1=\u0026#34;itc\u0026#34; nm2=\u0026#34;ith\u0026#34; print(f\u0026#34;itc==ith的结果是{nm1==nm2}\u0026#34;) # 还可以利用比较运算的方式进行赋值！！！（布尔类型） 六种比较运算符\nif语句基本格式 布尔类型在判断语句中的作用\n1 2 3 4 5 6 7 8 9 10 age=30 if age\u0026gt;=18:# 冒号 print(\u0026#34;我已经成年了\u0026#34;) # 有4行的缩进 tab # 是通过缩进来看代码的归属 age=int(input(\u0026#34;你的年龄是：\u0026#34;))# input输入的都是字符串类型 if age\u0026gt;=18: print(\u0026#34;我已经成年了\u0026#34;) else: print(\u0026#34;没成年\u0026#34;) print(\u0026#34;时间过得真快\u0026#34;) if后面必须是布尔类型 不要忘记冒号 属于if的雨具有四个空格缩进 if else语句 组合使用（不符合时输出的值）\n1 2 3 4 5 6 7 8 9 10 11 if : 1 2 3 4 else:# else的缩进应该与if同级，语法与if一致 1 2 3 4 # else无需判断条件 if elif else 多条件判断的实现\nif 条件： elif 条件： else:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 if 1: elif 2: elif 3: else: # 例题 h=int(input(\u0026#34;请输入你的身高(cm)：\u0026#34;)) vip=int(input(\u0026#34;请输入你的vip级别：\u0026#34;)) if h\u0026lt;120: print(\u0026#34;身高可以免费\u0026#34;)# 先判断第一句，条件之间是互斥的 elif vip\u0026gt;3: print(\u0026#34;vip可以免费\u0026#34;) else: print(\u0026#34;不好意思，需要收费\u0026#34;) # ctrl+/:注释 if int(input(\u0026#34;请输入你的身高(cm)：\u0026#34;))\u0026lt;120: print(\u0026#34;身高可以免费\u0026#34;) elif int(input(\u0026#34;请输入你的vip级别：\u0026#34;)): print(\u0026#34;vip可以免费\u0026#34;) else: print(\u0026#34;不好意思，需要收费\u0026#34;) # 此时非常简洁，并且一次无需输入多个变量！！ 注意事项\nelif语句可以有很多个 判断是互斥和有顺序的 空格缩进不可以省去 从而实现多个条件的判断 判断语句的嵌套 终极用法 嵌套使用 外层判断——\u0026gt;内层判断 注意层次关系，空格缩进！ 1 2 3 4 5 6 7 8 if int(input(\u0026#34;你的身高是多少：\u0026#34;))\u0026gt;120: print(\u0026#34;身高不达标\u0026#34;) if int(input(\u0026#34;你的级别：\u0026#34;))\u0026lt;4: print(\u0026#34;级别不达标\u0026#34;) else: print(\u0026#34;级别达标\u0026#34;) else : print(\u0026#34;身高达标\u0026#34;) python的缩进十分重要，与c不同 用缩进来区分代码块！！！ 猜数字游戏 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import random num=random.randint(1,10)# 产生随机数1~10 print(num) a=int(input(\u0026#34;输入你猜测的数字：\u0026#34;)) if a==num: print(\u0026#34;你猜中了\u0026#34;) else: if a\u0026gt;num: print(\u0026#34;你猜的数字大了\u0026#34;) else: print(\u0026#34;你猜的数字小了\u0026#34;) a = int(input(\u0026#34;输入你猜测的数字：\u0026#34;)) if a == num: print(\u0026#34;你猜中了\u0026#34;) else: if a \u0026gt; num: print(\u0026#34;你猜的数字大了\u0026#34;) else: print(\u0026#34;你猜的数字小了\u0026#34;) a = int(input(\u0026#34;输入你猜测的数字：\u0026#34;)) if a == num: print(\u0026#34;你猜中了\u0026#34;) else: print(\u0026#34;都猜不中\u0026#34;) 多层嵌套，但是太过复杂了！\n循环语句while 1 2 3 4 5 6 7 8 # 基本形式 while 条件: 1 2 3 4 # 只要满足条件，就会无限循环执行 # 条件同样是布尔类型 案例\n1 2 3 4 5 6 7 8 9 10 11 12 i=0 while i\u0026lt;100: print(\u0026#34;我喜欢你\u0026#34;) i+=1# 要改变条件才能结循环 print(i) # 求1~100的和！ i=1 s=0 while i\u0026lt;=100: s+=i i+=1# 结束条件设计 print(f\u0026#34;1加到100的和是：{s}\u0026#34;) 条件为布尔类型，Ture为继续循环，False为结束循环 设置循环的终止条件 同样需要空格确定代码归属 数字炸弹游戏\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random num=random.randint(1,100)# 产生随机数 n=0# 记录猜的次数 flag=1# 布尔类型变量，循环的标记！ # flag=False/Ture也可以定义！ while flag: a=int(input(\u0026#34;请输入一个数字：\u0026#34;))# 循环条件要改变！ if a==num:# 猜对时候的判断 flag=0 else:# 猜错 if a\u0026gt;num: print(\u0026#34;猜的数字大了\u0026#34;) else: print(\u0026#34;猜的数字小了\u0026#34;) n+=1 print(f\u0026#34;猜对了，你猜的次数为：{n}\u0026#34;) while循环嵌套使用 1 2 3 4 5 6 7 8 9 i=1 while i\u0026lt;=100: j = 1# 定义在循环体，使每次外层循环都会执行内层 print(f\u0026#34;我喜欢你第{i}天\u0026#34;) while j\u0026lt;=10: print(f\u0026#34;玫瑰花第{j}朵\u0026#34;) j+=1 i+=1# 要改变条件才能结循环 print(f\u0026#34;坚持到{i-1}天，表白成功\u0026#34;) 同理，缩进决定层次关系！ 循环体条件需要改变！避免无限循环 难点：条件的控制，每一层有自己的循环条件 嵌套案例 print输出不换行的实现\n1 2 3 print(\u0026#34;hello\u0026#34;,end=\u0026#39;\u0026#39;) print(\u0026#34;world\u0026#34;,end=\u0026#39;\u0026#39;)# 下面这个不改也行？ # 实现输出不换行 制表符\\t\n1 2 3 4 5 6 7 print(\u0026#34;hello world\u0026#34;) print(\u0026#34;hhh hhh\u0026#34;) # 对不齐 print(\u0026#34;hello\\tworld\u0026#34;) print(\u0026#34;hhhhhh\\thhh\u0026#34;) # 能对齐 # 所以\\t相当于根据字数给格子 99乘法表\n1 2 3 4 5 6 7 8 9 10 11 i=1 while i\u0026lt;=9: j=1 while j\u0026lt;=i: if i!=j: print(f\u0026#34;{i}*{j}={i * j}\\t\u0026#34;,end=\u0026#39;\u0026#39;)# 制表符作用于前面元素 else: print(f\u0026#34;{i}*{j}={i * j}\u0026#34;) j+=1 i+=1 # 也可以利用print()实现换行，输出空内容，不用条件判断 for循环 基本语法 while是自定义循环条件 for是“轮询”机制，一个个执行 1 2 3 4 # for 临时变量in 待处理的数据集 name=\u0026#34;abcdef\u0026#34; for x in name: print(x,end=\u0026#39;\u0026#39;) 无法定义循环条件 同样需要缩进 1 2 3 4 5 6 7 char=input(\u0026#34;请输入一串字符\u0026#34;) a=0 for x in char: if x==\u0026#39;a\u0026#39;: a+=1 print(a) # 计算a的数目 range语句 待处理数据集称为序列类型\n包括字符串、列表、元组等 其内容可以一个个依次取出 range语句生成一个简单的数字序列 语法：\nrange(num)为0开始，到num-1 range(num1,num2) 不含num2 range(num1,num2,step) step为步径 1 2 3 for i in range(10,100,2): print(i) \u0026lt;!-- 10 12 ····· 98 --\u0026gt; 变量作用域 1 2 3 for i in range(3): print(i) print(i)# i作用范围应该在for循环内部！ 全局变量，局部变量 想访问临时变量，可以先在循环外进行定义\nfor的嵌套 1 2 3 4 5 6 7 # 同样的案例： i=1 for i in range(1,101): print(f\u0026#34;今天是我表白的第{i}天，加油\u0026#34;) for j in range(1,11): print(f\u0026#34;送的第{j}朵玫瑰花\u0026#34;) print(f\u0026#34;表白的第{i}天成功\u0026#34;) 空格缩进确定层次关系 在嵌套中尤为重要！！\nfor与while循环可以嵌套使用 1 2 3 4 5 for i in range(1,10): for j in range(1,i+1): print(f\u0026#34;{j}*{i}={i*j}\\t\u0026#34;,end=\u0026#39;\u0026#39;) print() \u0026lt;!-- 利用for输出乘法表 --\u0026gt; 循环中断 break continue 跳出某次循环 ，进入下一次 直接结束循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # continue for i in range(1,6): print(\u0026#34;1\u0026#34;) continue print(\u0026#34;2\u0026#34;) # 只能作用于它所在的循环 for i in range(1,6): print(\u0026#34;1\u0026#34;) for j in range(1,3): print(\u0026#34;2\u0026#34;) continue print(\u0026#34;3\u0026#34;)# 只作用与这一句 print(\u0026#34;4\u0026#34;) 1 2 3 4 5 6 7 8 # break 直接结束所在整个循环 for i in range(1,100): print(\u0026#34;1\u0026#34;) break print(\u0026#34;2\u0026#34;) print(\u0026#34;3\u0026#34;) # 只输出1,3一次 # 同样只能控制所在的循环 案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import random n=10000 r=0 for i in range(1,21): r=random.randint(1,10) if(n==0): break if r\u0026lt;5: print(f\u0026#34;员工{i},绩效{r}，低于5，不发工资\u0026#34;) continue else: n-=1000 print(f\u0026#34;员工{i}，发放工资1000元,还剩{n}\u0026#34;) print(\u0026#34;工资发完了\u0026#34;) 函数 函数介绍 函数是可以重复使用的，有特定功能的代码段 比如len()函数,str() 1 2 3 4 5 6 7 8 9 # 自己开发功能，实现字符串长度计算！！ def my_len(data): count=0 for i in data: count+=1 print(f\u0026#34;字符串{data}的长度是{count}\u0026#34;) my_len(\u0026#34;dsffg\u0026#34;) my_len(\u0026#34;dsffgggg\u0026#34;) # 一组织好的，可重复使用，有特点功能 函数语法 1 2 3 4 5 6 7 8 9 def 函数名(传入参数):# 有空格，要冒号 函数体# tab return 返回值 # 定义函数，输出相关信息 def hi(): print(\u0026#34;hi\u0026#34;) # 函数的调用 函数名（参数） hi()# 这个函数没有参数 参数不需要可以省略 返回值也可有可无 函数必须先定义后使用 函数参数的传入 **函数计算式，接受外部提供的数据\n1 2 3 4 5 6 def add(x,y):# 通过参数的传递实现 result=x+y print(f\u0026#34;{x}+{y}={result}\u0026#34;) add(1,2) # x和y，称为形式参数（形参）用逗号分割 # 外部的1,2为实际参数（实参），按照顺序传入，使用逗号分割 形参、实参 参数数量不限，使用逗号分开 传入参数时，要与形参一一对应，逗号隔开 1 2 3 4 5 6 7 def tem(): data=float(input(\u0026#34;请输入你的体温：\u0026#34;)) if(data\u0026gt;37.5): print(\u0026#34;不正常\u0026#34;) else: print(\u0026#34;正常\u0026#34;) tem() 函数返回值 1 2 3 4 5 6 def add(a,b): result=a+b return result# result 为返回值 print(\u0026#34;这句话不执行了\u0026#34;)# return之后不执行！！ r=add(1,3) print(r) None返回值 无返回值函数实际上就是返回了None这个字面量 return None也可以，和不加这句一样\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def hi(): return None print(type(hi())) # 类型为\u0026lt;class \u0026#39;NoneType\u0026#39;\u0026gt; # 在if判断中，None==False，用于判断 def check(age): if age\u0026gt;18: return \u0026#34;success\u0026#34; else: return None r=check(16) if r==None: print(\u0026#34;未成年\u0026#34;) # 声明无初始值的变量： name=None 三种基本的用法\n函数说明文档 1 2 3 4 5 6 7 def add(x,y): \u0026#34;\u0026#34;\u0026#34; add函数接受两个函数，俩个数相加的功能 \u0026#34;\u0026#34;\u0026#34; result =x+y print(f\u0026#34;两数相加的结果是：{result}\u0026#34;) return result 通过多行注释，解释参数，返回值和功能！！\n函数的嵌套调用 在一个函数中调用另一个函数\n1 2 3 4 5 6 7 def b(): print(\u0026#34;2\u0026#34;) def a(): print(\u0026#34;1\u0026#34;) b() print(\u0026#34;3\u0026#34;) a()# 先输出1，在进入b，输出2，最后输出3 b执行完成后才会执行a的剩余内容\n变量的作用域 局部变量 1 2 3 4 5 6 # 定义在函数体内部的变量，只在函数体内生效 def a(): num=100 print(num) a() print(num)# 错误 全局变量 1 2 3 4 5 6 7 8 9 num=200 def a(): print(num) def b(): print(num) a() b() print(num) # 会执行3次 在函数内修改全局变量 1 2 3 4 5 6 7 8 9 num=200 def a(): print(num) def b(): num=500# 变成局部变量了，这个num和外面的num没有任何关系 print(num) a() b() print(num) 如何修改\n1 2 3 4 5 6 7 8 9 10 num=200 def a(): print(num) def b(): global num# ！！！！ num=500# 变成全局变量了，这个num和外面的num是一个 print(num) a() b() print(num) 综合案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 money=5000000 name=input(\u0026#34;请输入你的名字\u0026#34;) flag=1 def cha(): print(\u0026#34;查询余额\u0026#34;) print(f\u0026#34;{name}，你好，你的余额是{money}\u0026#34;) def cun(num): print(\u0026#34;存款\u0026#34;) global money money+=num print(f\u0026#34;{name}，你好，您存款{num}元成功\u0026#34;) print(f\u0026#34;{name}，你好，你的余额是{money}\u0026#34;) def qu(num): print(\u0026#34;存款\u0026#34;) global money money-=num print(f\u0026#34;{name}，你好，您取款{num}元成功\u0026#34;) print(f\u0026#34;{name}，你好，你的余额是{money}\u0026#34;) def tui(): global flag flag=0 return 1 while flag: print(f\u0026#34;{name}，您好，欢迎使用ATM，请选择操作：\u0026#34;) print(\u0026#34;查询余额\\t【输入1】\u0026#34;) print(\u0026#34;存款\\t\\t【输入2】\u0026#34;) print(\u0026#34;取款\\t\\t【输入3】\u0026#34;) print(\u0026#34;退出\\t\\t【输入4】\u0026#34;) xuan=int(input(\u0026#34;请输入你的选择：\u0026#34;)) if xuan==1: cha() elif xuan==2: num=int(input(\u0026#34;请输入数额\u0026#34;)) cun(num) elif xuan==3: num = int(input(\u0026#34;请输入数额\u0026#34;)) qu(num) else: tui() 数据容器 入门 一种可以容纳多分数据的数据类型 容纳的数据元素 按照： 重复元素 是否可以修改 是否有序 可以分为列表、元组、字符串、集合、字典 列表 列表的定义 一个人的名字可以用字符串 100个人使用列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 变量名称=[元素1，元素2····]# 列表内的数据称为元素 list =[\u0026#34;ith\u0026#34;,\u0026#34;itc\u0026#34;,\u0026#34;python\u0026#34;] print(list) print(type(list)) # 简单的字符串列表，中括号，以逗号分隔 list =[\u0026#34;ith\u0026#34;,666,True] print(list) print(type(list)) # 列表中的元素类型可以不同！！ list =[[1,2,3],[1,2,4],[1,3,4,5]] print(list) print(type(list)) # 列表中可以嵌套列表！！！ 定义\n1 2 3 4 list =[[1,2,3],[1,2,4],[1,3,4,5]] print(list) print(type(list)) # \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; 元素类型没有限制！ 列表的下标索引 在列表中取出对应位置的数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 list =[[1,2,3],[1,2,4],[1,3,4,5]] print(list[0])# 第一个 print(list[2])# 第二个 print(list[1]) # 下标取出列表中元素 # 还可以反向索引 list =[[1,2,3],[1,2,4],[1,3,4,5]] print(list[-1])# 倒数第一个 print(list[-2])# 倒数第二个 print(list[-3]) # 二位的数组 list =[[1,2,3],[1,2,4],[1,3,4,5]] print(list[-1][1])# 两层，先外后内 3 print(list[-2][2])# 4 print(list[-3][0])# 1 # 下标小心超出范围，会报错 list=[\u0026#34;cb\u0026#34;,\u0026#34;it\u0026#34;,\u0026#34;python\u0026#34;] print(list[1][1])# t # 字符串也是列表 list=\u0026#34;zbcdefghijklmn\u0026#34; print(list[3]) 列表的常用操作 插入 删除 清空 修改 统计元素个数 方法与函数 如果将函数定义为class的成员，函数称为方法\n查询，添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 查询某元素的下标 list=[\u0026#39;itcast\u0026#39;,\u0026#39;ithei\u0026#39;,\u0026#39;python\u0026#39;] num=list.index(\u0026#34;ithei\u0026#34;)# 方法的调用与函数有所不同 print(num) list.index(\u0026#39;hello\u0026#39;)# 元素不存在会报错 # 修改某个元素值 list[1]=\u0026#39;ddd\u0026#39;# 重新赋值 # 插入元素 列表.insert(下标，元素) list.insert(1,\u0026#34;插入元素\u0026#34;) print(list) # 追加，到列表的尾部 list.append(\u0026#34;尾部\u0026#34;) # 追加一批元素 list.extend(其他数据容器) list.extend([1,2,3]) list.extend(list) 删除\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 元素的删除，下标，两种方式 del list[2] list.pop(2)# 是一个方法，作用是返回取出的元素，同时取出元素 print(list.pop(1)) # 赋值的同时也删除了 e=list.pop(2) print(list) print(e) # 删除第一个匹配项 list =[1,2,3,1,2,4,1,3,4,5] list.remove(1) print(list)# [2, 3, 1, 2, 4, 1, 3, 4, 5] # 清空列表 list.clear() print(list) 统计数量\n1 2 3 4 5 6 7 list =[1,2,3,1,2,4,1,3,4,5] list.remove(1) print(list) print(list.count(1))# 1出现的次数 # 总元素 a=len(list) print(a) 归纳 特点： 例题 1 2 3 4 5 6 7 8 9 list=[21,25,21,23,22,20] list.append(31)# 追加到尾部 list.extend([29,33,30]) num1=list[0] num2=list[-1] print(num1,num2) index=list.index(31) print(index) print(f\u0026#34;列表的内容为：{list}\u0026#34;) 列表的遍历 将容器内的元素取出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # while循环遍历 def while_1(): index=0 while index\u0026lt;len(list): element=list[index] print(f\u0026#34;列表的元素是{element}\u0026#34;) index+=1 while_1() # 使用for循环遍历 def for_1(): for i in list:# for循环本身就是使用列表中的 element=i print(f\u0026#34;列表的元素是{element}\u0026#34;) for_1() for循环受限，但是用起来会比较简单\n所以for循环使用的次数多一点 1 2 3 4 5 6 7 8 index=0 list=[1,2,3,4,5,6,7,8,9,10] new=[] while index\u0026lt;len(list): if list[index]%2==0: new.append(list[index]) index+=1 print(new) 元组 元组不可以修改 元组使用()定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 yuan=(1,\u0026#34;hello\u0026#34;,True) # 定义空元组的方式！！ y2=() y3=tuple() print(f\u0026#34;t1的内容是：{type(yuan)},{yuan}\u0026#34;) print(f\u0026#34;y2的内容是：{type(y2)},{y2}\u0026#34;) print(f\u0026#34;y3的内容是：{type(y3)},{y3}\u0026#34;) # t1的内容是：\u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt;,(1, \u0026#39;hello\u0026#39;, True) # y2的内容是：\u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt;,() # y3的内容是：\u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt;,() # 定义单个的元组 y4=(\u0026#34;hello\u0026#34;,)# 还得有逗号 # 元组的嵌套： y5=((1,2,3),(1,2,4)) 1 2 3 # 下标索引 print(y5[1][2]) # 取出元组中的元素 元组的操作\n元组不可修改 1 2 3 4 5 6 7 8 9 10 # 1. index查找 y5=(1,2,3,1,2,4) index=y5.index(1) print(index) # 2. count数目 num=y5.count(1) print(num) # 3. len长度 num=len(y5) print(num) 也可以遍历，做法与列表相同\n元组里的元素不能修改 但是元组内的嵌套列表可以修改 1 2 3 y5=((1,2,3),[1,2,4]) y5[1][1]=12# 可以这样修改 print(y5) 总结 字符串（作为数据容器） 再认字符串 是字符的容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # 取某一下标的元素 str=\u0026#34;itheima and itcast\u0026#34; s1=str[2] s2=str[-16] print(s1,s2)# h # 字符串也是无法修改的，但是可以整个完全修改（重新赋值） # 查找下标 index=str.index(\u0026#39;and\u0026#39;) print(index) # 字符串的替换（将全部字符串1替换为新的字符串） # replace # 不是修改，而是得到一个新的字符串 new=str.replace(\u0026#34;it\u0026#34;,\u0026#34;程序\u0026#34;)# 使用新的字符串接收 print(new) # 字符串分割 split str=\u0026#34;hello python itheima and itcast\u0026#34; list=str.split(\u0026#34; \u0026#34;)# 以某个字符串为分割 此处为空格 print(list) # 最后得到的结果是一个列表！！ # strip（去除前后指定的字符串） str=\u0026#34; hello python itheima and itcast \u0026#34; str1=str.strip() print(str1) # 结果hello python itheima and itcast # 不传参数，去除首尾空格，说明有默认参数 str=\u0026#34;12hello python itheima and itcast12\u0026#34; str1=str.strip(\u0026#34;12\u0026#34;) print(str1) # 这样也可以都去除，实际上时去除“1”和“2” str=\u0026#34;12hello python itheima and itcast21\u0026#34; str1=str.strip(\u0026#34;12\u0026#34;) print(str1) # count c=str.count(\u0026#34;h\u0026#34;) print(c) # 长度len l=len(str1) print(l) 总结 只可以存储字符串 不可以修改（增减元素） 字符串案例 1 2 3 4 5 6 7 str=\u0026#34;itheima itcast boxuegu\u0026#34; c=str.count(\u0026#34;it\u0026#34;) print(c) str1=str.replace(\u0026#34; \u0026#34;,\u0026#34;|\u0026#34;) print(str1) list=str1.split(\u0026#34;|\u0026#34;) print(list) 数据容器的切片 序列 内容连续、有序、可使用下标索引的一类数据容器 切片 从序列中取一个子序列 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 序列[起始下标：结束下标：步长] # 起始留空从0开始，结束不包，留空截取到结尾，步长负数，反向取 # 同样是得到一个新的序列 list=[1,2,3,4,5,6,7] result=list[1:4] print(result) # [2,3,4] list=(1,2,3,4,5,6,7) result=list[:] print(result) # (1, 2, 3, 4, 5, 6, 7) list=\u0026#39;01234567\u0026#39; result=list[::2] print(result) # 0246 list=\u0026#39;01234567\u0026#39; result=list[::-1] print(result) # 76543210，将序列翻转 list=[1,2,3,4,5,6,7] result=list[3:1:-1] print(result) # [4, 3] 1 2 3 4 5 6 str=\u0026#34;我问问，员序程马黑来，dgga学\u0026#34; str1=str.replace(\u0026#34;来\u0026#34;,\u0026#34;，\u0026#34;) list=str1.split(\u0026#34;，\u0026#34;) str2=list[1] str3=str2[::-1] print(str3) 集合 之前都支持重复，集合不支持，去重 内容无序 1 2 3 4 5 6 7 8 9 # 使用大括号定义 set={1,2,3,4,5,6,6} print(set) # 定义空集合 em=set()# 空集合 set={1,2,3,4,5,6,6}# 自动去除相同元素 print(set) set2={}# 不能这样定义空集合，这是空字典 print(set2) 集合无序，不支持下标索引 允许修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # 添加新元素 add set={1,2,3,4,5,6,6} set.add(\u0026#34;python\u0026#34;) print(set) # 移除元素 remove set.remove(\u0026#34;python\u0026#34;) print(set) # 随机取出元素 pop a=set.pop() print(set,a)# {2, 3, 4, 5, 6} 1 # 清空clear set.clear() # 差集 difference set1={1,2,3} set2={1,5,6} set3=set1.difference(set2) print(set3) print(set1)# set1,2不变 print(set2)# {2, 3} {1, 2, 3} {1, 5, 6} # 消除差集 set1变化，出去与2相同的元素 set1={1,2,3} set2={1,5,6} set1.difference_update(set2) print(set1) print(set2)# {2, 3} {1, 5, 6} # 合并union set1={1,2,3} set2={1,5,6} set3=set1.union(set2) print(set3) print(set1) print(set2)# {1, 2, 3, 5, 6} {1, 2, 3} {1, 5, 6} # 元素数目 len len(set1) # 遍历 # 集合不支持下标索引，不用while，用for set={1,2,3,4,5,6,6} for e in set: print(e) 字典 定义 key-value 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 {}键值对 # 定义 dict={ \u0026#34;nianl\u0026#34;:19,# 大括号定义，逗号隔开 \u0026#34;nian\u0026#34;:2025, \u0026#34;yue\u0026#34;:2, \u0026#34;ri\u0026#34;:4 } # 空字典2种 dic={} dic=dict() print(dic)# {} # key不能重复 # 会覆盖掉重复的 # 从字典中获取数据（无下标索引） c=dic[\u0026#34;ri\u0026#34;] print(c) print(dic[\u0026#34;nian\u0026#34;]) print(dic[\u0026#34;nianl\u0026#34;]) print(dic[\u0026#34;yue\u0026#34;]) # 嵌套，key不能是字典，value可以任意数据 fen={ 1:{ \u0026#34;yuwen\u0026#34;:100,# 逗号 \u0026#34;shuxue\u0026#34;:100, \u0026#34;yinyu\u0026#34;:100 },# 逗号 2:{ \u0026#34;yuwen\u0026#34;:10, \u0026#34;shuxue\u0026#34;:10, \u0026#34;yinyu\u0026#34;:10 } } print(fen) print(fen[1][\u0026#34;yuwen\u0026#34;])# 多层调用 字典的常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 新增元素字典[key]=value dict={1:99,2:100,3:23} dict[4]=66 print(dict) # 更新，语法同上 dict[1]=66 print(dict) # 元素的删除 pop dict[1]=66 s=dict.pop(1) print(s)# s=66 print(dict) # 清空clear dict.clear() # 得到字典中的全部key keys=dict.keys() print(keys)# dict_keys([2, 3, 4]) # 遍历字典 # 方式一 for key in keys: print(f\u0026#34;key:{key}\u0026#34;) print(f\u0026#34;value:{dict[key]}\u0026#34;) # 方式2，直接进行for循环 for key in dict: print(f\u0026#34;key:{key}\u0026#34;) print(f\u0026#34;value:{dict[key]}\u0026#34;) # 不能使用while循环 # 统计元素数量 len num=len(dict) print(num) 总结 字典例题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 dict={ \u0026#34;wang\u0026#34;:{ \u0026#34;部门\u0026#34;:\u0026#34;keji\u0026#34;, \u0026#34;工资\u0026#34;:2000, \u0026#34;级别\u0026#34;:1 }, \u0026#34;zhou\u0026#34;:{ \u0026#34;部门\u0026#34;:\u0026#34;shichang\u0026#34;, \u0026#34;工资\u0026#34;:5000, \u0026#34;级别\u0026#34;:2 }, \u0026#34;lin\u0026#34;:{ \u0026#34;部门\u0026#34;:\u0026#34;shichang\u0026#34;, \u0026#34;工资\u0026#34;:7000, \u0026#34;级别\u0026#34;:3 }, \u0026#34;zhang\u0026#34;:{ \u0026#34;部门\u0026#34;:\u0026#34;keji\u0026#34;, \u0026#34;工资\u0026#34;:4000, \u0026#34;级别\u0026#34;:1 }, \u0026#34;liu\u0026#34;:{ \u0026#34;部门\u0026#34;:\u0026#34;shichang\u0026#34;, \u0026#34;工资\u0026#34;:6000, \u0026#34;级别\u0026#34;:2 } } print(dict) for key in dict: if dict[key][\u0026#34;级别\u0026#34;]==1: dict[key][\u0026#34;级别\u0026#34;]=2 dict[key][\u0026#34;工资\u0026#34;]+=1000 print(dict) # 这是一个内外层嵌套字典 总结对比 是否支持下标索引 支持：列表、元组、字符串-序列 不支持：集合、字典 重复元素： 支持：列表、元组、字符串-序列类型 不支持：集合、字典-非序列类型 是否可以修改 支持：列表、集合、字典 不支持：元组、字符串 表格对比 应用场景 通用操作 都可以for循环遍历 len(),max(),min() 1 2 3 4 5 6 7 8 9 # len len(list) len(tuple) len(str) # max取最大的元素 max(list) max(str) print(max(dict))# 字典直接判断key，没有理会value # min为最小的元素 通用转换功能 1 2 3 4 5 6 7 8 9 10 # list list(list) list(tuple) list(set) list(str)# 将字符串一个一个拆分开 list(dict)# 结果是keys # tuple # str # set # 有无转换成字典的函数,没有办法,没有键值对 展示一下通用转化的结果 可见字典转字符串所有元素都能保留下来 集合数据的无序性和去重性质\n通用排序功能 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # sorted list=[2,3,1,4,5] tuple=(2,3,1,4,5) str=\u0026#34;bdcefga\u0026#34; set={3,1,2,5,4} dict={\u0026#34;key3\u0026#34;:1,\u0026#34;key1\u0026#34;:2,\u0026#34;key2\u0026#34;:3,\u0026#34;key5\u0026#34;:4,\u0026#34;key4\u0026#34;:5} print(f\u0026#34;排序的结果是：{sorted(list)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(tuple)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(str)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(set)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(dict)}\u0026#34;) # 排序的结果为列表对象 print(f\u0026#34;排序的结果是：{sorted(list,reverse=True)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(tuple,reverse=True)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(str,reverse=True)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(set,reverse=True)}\u0026#34;) print(f\u0026#34;排序的结果是：{sorted(dict,reverse=True)}\u0026#34;) # 反转排序 排序的结果是：[1, 2, 3, 4, 5]\n排序的结果是：[1, 2, 3, 4, 5] 排序的结果是：[\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, \u0026rsquo;d\u0026rsquo;, \u0026rsquo;e\u0026rsquo;, \u0026lsquo;f\u0026rsquo;, \u0026lsquo;g\u0026rsquo;] 排序的结果是：[1, 2, 3, 4, 5] 排序的结果是：[\u0026lsquo;key1\u0026rsquo;, \u0026lsquo;key2\u0026rsquo;, \u0026lsquo;key3\u0026rsquo;, \u0026lsquo;key4\u0026rsquo;, \u0026lsquo;key5\u0026rsquo;]\n总结 字符串大小的比较 基于ASCLL码比较\n按位比较，一位一位进行，只要有一位大，那么整体就大，后面不需要了\n1 print(f\u0026#34;ab\u0026gt;a的结果是{\u0026#39;ab\u0026#39;\u0026gt;\u0026#39;a\u0026#39;}\u0026#34;)# 结果是True 函数进阶 多返回值 如何返回多个返回值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 def return_num(): return 1 return 2 print(return_num()) # 此时只会返回1，因为return之后的语句不会执行 def return_num(): return 1,\u0026#34;hello\u0026#34;,True# 使用逗号隔开，支持不同类型 x,y=return_num()# 逗号隔开，按顺序接受 print(x,y) print(return_num()) \u0026#34;\u0026#34;\u0026#34; 1 2 结果 (1, 2) \u0026#34;\u0026#34;\u0026#34; 多种传参方式 位置参数 按找传入参数的位置来确定传入的参数（一般用的） 关键字参数 以键值对的形式进行传参数 1 2 3 4 5 6 def user(name,age,gender): print(1) user(\u0026#34;小明\u0026#34;,age=20,,gender=\u0026#34;男\u0026#34;) # 可以与位置参数混用，但位置参数必须在前面，关键词参数之间不存在先后顺序！！！ user(age=18,gender=\u0026#34;男\u0026#34;,name=\u0026#34;ee\u0026#34;) # 可以不按照参数的定义顺序传参 缺省参数 给一个不传递时的默认参数\n1 2 3 4 5 def user(name,age,gender=\u0026#34;男\u0026#34;):# 给参数一个默认值 print(f\u0026#34;姓名是{name},年龄是{age},性别是{gender}\u0026#34;) user(\u0026#34;小明\u0026#34;,age=20) # 默认的参数必须写到最后面的 def user(name,age=18,gender=\u0026#34;男\u0026#34;):# 这样也是可以的 不定长参数 不确定传递多少参数！！！\n1 2 3 4 5 6 7 8 def user(*args): print(args)# args为元组 user(\u0026#39;tom\u0026#39;,18,True) # 位置不定长 def info(**k): print(k)# k为字典 info(name=\u0026#34;tom\u0026#34;,nian=19)# k-v型的 # 关键字不定长！ 总结 匿名函数 传入函数 将函数作为参数传入\n1 2 3 4 5 6 def t(a):# 此处的a为一个函数 result=a(1,2)# 这里要求a为函数，且支持本行逻辑调用 print(result) def c(x,y): return x+y t(c)# 将c函数传入a中 这是计算逻辑的传递，而非数据的传递 这里数据确定了，但是计算逻辑不确定 实现函数调用接口的功能？ 比如一个函数需要再不同情况下调用不同函数（计算逻辑），就可以使用这种函数调用快速实现！\n1 2 3 4 5 6 7 8 9 10 def t(a): result=a(1,2) print(result) def c(x,y): return x+y def b(x,y): return x-y t(c) t(b) # 这样？传入计算逻辑 lambda定义匿名函数 def定义带有名称的 lambda定义匿名，只能临时使用一次 lambda 变量:一行代码 只能一行\n1 2 3 4 def t(a): result=a(1,2) print(result) t(lambda x,y:x+y)# 默认返回x+y 作用是简化？\n文件 编码 文件通过编码为二进制，存在电脑中，也可以反向翻译回去 UTF-8 编码本，有多种编码的方式 读取操作 文本文件，视频文件、音频文件、图像文件、可执行文件等等 操作：打开，读写，关闭 打开 1 open(name,mode,encoding) r：以只读方式打开 w:打开一个文件只用于写入，文件已存在则删除原有内容 a:打开文件用于追加，已存在则写入原有的内容之后！不存在则创建新的\n打开 1 2 f=open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) print(type(f))# \u0026lt;class \u0026#39;_io.TextIOWrapper\u0026#39;\u0026gt; 读取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # read方法 文件.read(num)多少字节 f=open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) print(f\u0026#34;读取10字节的结果是{f.read(10)}\u0026#34;) print(f\u0026#34;读取全部内容的结果是{f.read()}\u0026#34;) # 多次调用read会从上一次的结尾开始读取 list=f.readlines() print(list,type(list)) # readlines读取所有行并且返回一个列表 # 结果：[\u0026#39;我的记事本\\n\u0026#39;, \u0026#39;1111111\\n\u0026#39;, \u0026#39;2222222\\n\u0026#39;, \u0026#39;1111111\\n\u0026#39;] \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; # 该函数同样是从上次read的结尾开始读的 # readline 实现一次读取一行，返回字符串？ str=f.readline() str1=f.readline() print(str,type(str)) print(str1,type(str1)) # for循环读取文件行 for line in f: print((f\u0026#34;{line}\u0026#34;)) # 每一次读取一行 关闭 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import time time.sleep(5000) # 使程序一直运行，文件仍然在被调用 f.close() import time time.sleep(5000) # 这样就解除文件调用了！！ # with open语法 with open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) as f: for line in f: print((f\u0026#34;{line}\u0026#34;)) str = f.readline() print(str, type(str)) # 在with open中写文件操作，结束后自动关闭 总结： 作业 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 c=0 with open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) as f: for line in f: c+=line.count(\u0026#34;itheima\u0026#34;) print(c) # 1 with open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) as file: c = file.read().count(\u0026#34;itheima\u0026#34;) print(c) # 2 with open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) as f: for line in f: line=line.strip() print(line) words=line.split(\u0026#34; \u0026#34;) for word in words: if word ==\u0026#34;itheima\u0026#34;: c+=1 print(c) # 3 除了readlines为列表，其他都是字符串返回\n文件的写操作 open打开 write写入 flush刷新\n直接write时，内容并未真正写入文件。在内存中，缓冲区 flush时才会真正写入 1 2 3 4 5 6 7 8 # w：不存在的文件/重置 f=open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;w\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) f.write(\u0026#34;hello world\u0026#34;) import time f.flush()# 这样才能保存！！ time.sleep(44444) # close也附带flush的功能 f.close() 文件的追加操作 将之前的\u0026quot;w\u0026quot;改为\u0026quot;a\u0026quot;即可\n1 2 3 4 5 f=open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;a\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) f.write(\u0026#34;hello world\u0026#34;) import time # f.flush() f.close() \\n：换行\n文件操作综合 1 2 3 4 5 6 7 8 9 f=open(\u0026#34;C:/Users/17871/Desktop/test.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) for i in f: c=i.count(\u0026#34;正式\u0026#34;) if c==1: b=open(\u0026#34;C:/Users/17871/Desktop/test.txt.bak\u0026#34;,\u0026#34;a\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) b.write(i) b.close() f.close # 还可以使用strip和split 异常 什么是异常 错误时，解释器无法继续执行,BUG 异常的捕获方式 warning error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 try: 可能发生错误的代码 except: 出现异常执行的代码 # 如下：出现异常时执行except中的内容 try: f=open(\u0026#34;C:/Users/17871/Desktop/abc.txt\u0026#34;,\u0026#34;r\u0026#34;,encoding=\u0026#34;UTF-8\u0026#34;) except: print(\u0026#34;之前不存在\u0026#34;) f=open(\u0026#34;C:/Users/17871/Desktop/abc.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding = \u0026#34;UTF-8\u0026#34;) # 捕获指定异常 try: print(name) except NameError as e: print(\u0026#34;出现了变量未定义的异常\u0026#34;) print(e)# 将错误的说明语句输出：name \u0026#39;name\u0026#39; is not defined # 只捕获nameerror # 捕获多种异常：括号，类似元组的形式 try: print(name) 1/0 except (NameError,ZeroDivisionError) as e: print(\u0026#34;出现了变量未定义的异常或除0异常\u0026#34;) print(e) # 捕获所有异常：最开始的语法就可以 except Exception as e:# 或利用这种！Exception是一个顶级的异常 else,finally可有可无的部分\n1 2 3 4 5 6 7 8 9 10 11 12 try: print(\u0026#34;name\u0026#34;) except Exception as e: print(\u0026#34;出现了变量未定义的异常或除0异常\u0026#34;) print(e) else: print(\u0026#34;没有异常\u0026#34;) # 没有异常时执行try和else! finally: print(\u0026#34;一直会执行！\u0026#34;) f.close() # 有没有异常都会执行 异常的传递 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def f1(): print(\u0026#34;1开始\u0026#34;) num=1/0 print(\u0026#34;1结束\u0026#34;) def f2(): print(\u0026#34;2开始\u0026#34;) f1() print(\u0026#34;2结束\u0026#34;) try: f2() except Exception as e: print(f\u0026#34;捕捉了{e}\u0026#34;) # 输出为 \u0026#34;\u0026#34;\u0026#34; 2开始 1开始 捕捉了division by zero 可见传递性！在高的层级捕获就可以 \u0026#34;\u0026#34;\u0026#34; Python模块 模块的导入 什么是模块 一个Python文件，有函数、类、变量 将模块当做工具包使用 语法：\n1 2 3 4 5 6 7 [from 模块名] import 模块名 模块名.功能名 # time模块为例子 import time print(\u0026#34;你好\u0026#34;) time.sleep(5)# 使用模块内部的功能 print(\u0026#34;我好\u0026#34;) from\n1 2 3 4 5 6 7 8 9 from time import sleep print(\u0026#34;你好\u0026#34;) sleep(5)# 只调用了sleep功能！ print(\u0026#34;我好\u0026#34;) # import* from time import *# *表示全部功能 print(\u0026#34;你好\u0026#34;) sleep(5)# 直接sleep就可以了hh print(\u0026#34;我好\u0026#34;) as\n1 2 3 4 5 # 给模块或者功能改名！ import time as t# 换了一个名字 t.sleep(3) from time import sleep as sl sl(5) 模块导入一般写在开头\n自定义模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 调用 import jia jia.test(1,2) from jia import test test(1,2) # 模块 def test(a,b): print(a+b) # 同名时 from jia import test from jian import test test(1,2)# 执行第二个 # 方式调用模块时,模块内调用执行,可以使用main def test(a,b): print(a-b) if __name__ == \u0026#39;__main__\u0026#39;: test(1,2) # 只有内部运行时会执行，外部调用不会 __all__ =[\u0026#39;test1\u0026#39;] def test2(a,b): print(a-b) def test1(a, b): print(a + b) if __name__ == \u0026#39;__main__\u0026#39;: test2(1,2) # 此时from jian import *只会调用test1 Python包 自定义包 储存模块（py文件），是个文件夹 包含多个模块文件，且包含_init_.py文件 创建自己的 在根目录下创建目录，再在目录下写模块\n1 2 3 4 5 import my.jian my.jian.test1(1,2) from my import jian from my.jian import test1 # 多种导入的方式 总结 安装第三方包 在cmd中输入pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称 基础综合案例 折线图 json数据 负责不同编程语言的流通的数据格式 实现不同语言的传递，中转 ","date":"2025-01-28T18:50:40+08:00","image":"https://img0.baidu.com/it/u=4178333864,3313587158\u0026fm=253\u0026fmt=auto\u0026app=138\u0026f=JPEG?w=500\u0026h=666","permalink":"https://Brent050830.site/p/python%E5%AD%A6%E4%B9%A0/","title":"Python学习"},{"content":"Markdown入门教程 Ordered List Step1 Step2 Step3 引用 应引用\n二级嵌套\n列表\n我们是 嘿嘿 我们 无序列表 嵌套 有序 to do list a b c 表格\n左对齐 居中对齐 右对齐 a b c 谁 是 是 段落 换行——两个以上空格后回车或者空一行\n​\n朵朵\n字体 代码 斜体 ** ==高亮== == == 粗体 ** ** 斜粗体 *** *** 删除 ~~ ~~ 下划线 脚注 大物1 朵朵\n代码\n1 2 3 4 5 6 #include\u0026lt;iostream\u0026gt; using namespace std； int main(){ print(\u0026#34;hello world\u0026#34;); return 0; } 超链接 我的个人网站\n图片的插入操作： 使用图床：\n图床软件的链接 或者使用html语言来实现：\n其他操作 ==插入latex语法：==\n单行显示的语法：$f(x)=ax+b$ 块显示的语法： $$ \\begin{Bmatrix} a \u0026 b \\\\ c\u0026d \\end{Bmatrix} $$ Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 进阶的样式： 进一步美化 css语法：ctrl+shift+p 搜索 插入图片\n对照的相应代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 # \u0026lt;font face=\u0026#34;仿宋\u0026#34; font color=orange\u0026gt;Markdown入门教程\u0026lt;/font\u0026gt; ## Ordered List 1. Step1 1. Step2 2. Step3 **引用** \u0026gt;应引用 \u0026gt;\u0026gt;二级嵌套 1. **列表** - 我们是 - 嘿嘿 - 我们 1. 无序列表 2. 嵌套 3. 有序 4. to do list - [x] a - [ ] b - [ ] c 2. **表格** | 左对齐 | 居中对齐 | 右对齐 | | :- | :----: | ----: | |a|b|c| |谁|是|是| 3. ## 段落 - 换行——两个以上空格后回车或者空一行 *** 朵朵 |字体|代码| |:-:|:-:| |*斜体*|**| |==高亮==|== ==| |**粗体**|** **| |***斜粗体***|*** ***| |~~删除~~|~~ ~~| |\u0026lt;u\u0026gt;下划线\u0026lt;/u\u0026gt;|\u0026lt;u\u0026gt; \u0026lt;/u\u0026gt;| 4. ## 脚注 大物[^1] 朵朵 5. ***代码*** ```c++ #include\u0026lt;iostream\u0026gt; using namespace std； int main(){ print(\u0026#34;hello world\u0026#34;); return 0; } 超链接 我的个人网站\n图片的插入操作： 使用图床：\n图床软件的链接 或者使用html语言来实现：\n其他操作 ==插入latex语法：==\n单行显示的语法：$f(x)=ax+b$ 块显示的语法： $$ \\begin{Bmatrix} a \u0026 b \\\\ c\u0026d \\end{Bmatrix} $$ Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 进阶的样式： 进一步美化 css语法：ctrl+shift+p 搜索 插入图片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 # \u0026lt;font face=\u0026#34;仿宋\u0026#34; font color=orange\u0026gt;Markdown入门教程\u0026lt;/font\u0026gt; ## Ordered List 1. Step1 1. Step2 2. Step3 **引用** \u0026gt;应引用 \u0026gt;\u0026gt;二级嵌套 1. **列表** - 我们是 - 嘿嘿 - 我们 1. 无序列表 2. 嵌套 3. 有序 4. to do list - [x] a - [ ] b - [ ] c 2. **表格** | 左对齐 | 居中对齐 | 右对齐 | | :- | :----: | ----: | |a|b|c| |谁|是|是| 3. ## 段落 - 换行——两个以上空格后回车或者空一行 *** 朵朵 |字体|代码| |:-:|:-:| |*斜体*|**| |==高亮==|== ==| |**粗体**|** **| |***斜粗体***|*** ***| |~~删除~~|~~ ~~| |\u0026lt;u\u0026gt;下划线\u0026lt;/u\u0026gt;|\u0026lt;u\u0026gt; \u0026lt;/u\u0026gt;| 4. ## 脚注 大物[^1] 朵朵 5. ***代码*** ```c++ #include\u0026lt;iostream\u0026gt; using namespace std； int main(){ print(\u0026#34;hello world\u0026#34;); return 0; } 超链接 我的个人网站\n图片的插入操作： 使用图床：\n图床软件的链接 或者使用html语言来实现：\n其他操作 ==插入latex语法：==\n单行显示的语法：$f(x)=ax+b$ 块显示的语法： $$ \\begin{Bmatrix} a \u0026 b \\\\ c\u0026d \\end{Bmatrix} $$ Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 进阶的样式： 进一步美化 css语法：ctrl+shift+p 搜索 插入图片\n这是脚注的内容\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025-01-26T00:00:00Z","image":"https://pic1.imgdb.cn/item/67c03ef6d0e0a243d4073f65.jpg","permalink":"https://Brent050830.site/p/markdown/","title":"Markdown使用"}]